// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-kysely"

    // Optionally provide a destination directory for the generated file
    // and a filename of your choice
    output       = "../src/db"
    fileName     = "types.ts"
    // Optionally generate runtime enums to a separate file
    enumFileName = "enums.ts"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Session {
    id         String   @id
    user_id    String
    expires_at DateTime
    user       User     @relation(references: [id], fields: [user_id], onDelete: Cascade)
}

model User {
    id                    String             @id
    email                 String             @unique
    name                  String
    mobile                String?
    hashed_password       String?
    batch                 String?
    graduationDate        DateTime?
    organizationUnit      OrganizationUnit?  @relation(fields: [organizationUnitId], references: [id], onDelete: SetNull)
    organizationUnitId    String?
    staffType             StaffType?         @relation(fields: [staffTypeId], references: [id], onDelete: SetNull)
    staffTypeId           String?
    course                Course?            @relation(fields: [courseId], references: [id], onDelete: SetNull)
    courseId              String?
    role                  Role?              @relation(fields: [roleId], references: [id], onDelete: SetNull)
    roleId                String?
    loansLoanedBy         Loan[]             @relation("UserLoans_LoanedBy")
    loansApprovedBy       Loan[]             @relation("UserLoans_ApprovedBy")
    loansPreparedBy       Loan[]             @relation("UserLoans_PreparedBy")
    loansIssuedBy         Loan[]             @relation("UserLoans_IssuedBy")
    loansReturnedTo       Loan[]             @relation("UserLoans_ReturnedTo")
    accessRightsGranted   UserAccessRights[] @relation("UserAccessRights_GrantedUser")
    accessRightsGrantedBy UserAccessRights[] @relation("UserAccessRights_GrantedBy")
    session               Session[]
    Loan                  Loan[]
    Waiver                Waiver[]
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id          String        @id @default(cuid())
    name        String
    subCategory SubCategory[]
}

model SubCategory {
    id         String      @id @default(cuid())
    name       String
    category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
    categoryId String
    equipment  Equipment[]
}

model Equipment {
    id            String               @id @default(cuid())
    name          String
    photoPath     String?
    updatedAt     DateTime             @updatedAt
    subCategory   SubCategory?         @relation(fields: [subCategoryId], references: [id], onDelete: SetNull)
    subCategoryId String?
    inventory     Inventory[]
    loanItems     LoanItem[]
    checklist     String?
    course        EquipmentOnCourses[]
    active        Boolean
    loanLimit     Int
}

model Inventory {
    id             String          @id @default(cuid())
    assetNumber    String          @unique
    remarks        String?
    datePurchased  DateTime?
    warrantyExpiry DateTime?
    cost           Decimal
    status         EquipmentStatus
    equipment      Equipment?      @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
    equipmentId    String?
    loanItems      LoanItem[]
    active         Boolean
}

enum EquipmentStatus {
    LOST
    DAMAGED
    LOANED
    AVAILABLE
    UNAVAILABLE
    MISSING_CHECKLIST_ITEMS
}

model Loan {
    id                        String     @id @default(cuid())
    loanId                    String     @unique
    remarks                   String
    dueDate                   DateTime
    status                    LoanStatus
    signature                 String?
    loanedBy                  User?      @relation("UserLoans_LoanedBy", fields: [loanedById], references: [id], onDelete: SetNull)
    approver                  User?      @relation(fields: [approverId], references: [id], onDelete: SetNull)
    approvedBy                User?      @relation("UserLoans_ApprovedBy", fields: [approvedById], references: [id], onDelete: SetNull)
    preparedBy                User?      @relation("UserLoans_PreparedBy", fields: [preparedById], references: [id], onDelete: SetNull)
    issuedBy                  User?      @relation("UserLoans_IssuedBy", fields: [issuedById], references: [id], onDelete: SetNull)
    returnedTo                User?      @relation("UserLoans_ReturnedTo", fields: [returnedToId], references: [id], onDelete: SetNull)
    loanedById                String?
    approvedById              String?
    preparedById              String?
    issuedById                String?
    returnedToId              String?
    approverId                String?
    loanItems                 LoanItem[]
    waivers                   Waiver[]
    dateCreated               DateTime   @default(now())
    collectionReferenceNumber String?
    datePrepared              DateTime?
    dateIssued                DateTime?
    dateCollected             DateTime?
    dateReturned              DateTime?
}

enum LoanStatus {
    PENDING_APPROVAL
    REJECTED
    REQUEST_COLLECTION
    PREPARING
    READY
    COLLECTED
    CANCELLED
    RETURNED
    PARTIAL_RETURN
}

model LoanItem {
    id              String             @id @default(cuid())
    loan            Loan               @relation(fields: [loanId], references: [id], onDelete: Cascade)
    loanId          String
    equipment       Equipment?         @relation(fields: [equipmentId], references: [id], onDelete: SetNull)
    equipmentId     String?
    loanedInventory Inventory?         @relation(fields: [inventoryId], references: [id], onDelete: SetNull)
    inventoryId     String?
    status          LoanedItemsStatus?
    Waiver          Waiver?            @relation(fields: [waiverId], references: [id])
    waiverId        String?
}

enum LoanedItemsStatus {
    REQUEST_COLLECTION
    PREPARING
    READY
    COLLECTED
    RETURNED
    DAMAGED
    LOST
    CANCELLED
    MISSING_CHECKLIST_ITEMS
    REJECTED
}

model Waiver {
    id            String             @id @default(cuid())
    loan          Loan               @relation(fields: [loanId], references: [id])
    loanId        String
    loanItems     LoanItem[]
    waiveRequest  String?
    remarks       String?
    dateIssued    DateTime           @default(now())
    dateUpdated   DateTime?
    dateSubmitted DateTime?
    updatedBy     User?              @relation(fields: [updatedById], references: [id])
    status        WaiveRequestStatus
    updatedById   String?
}

model PasswordResetToken {
    token_hash String   @id
    user_id    String
    expires_at DateTime
}

enum WaiveRequestStatus {
    PENDING
    APPROVED
    RESOLVED
    REJECTED
    PENDING_REQUEST
}

model AccessRights {
    id               String                @id @default(cuid())
    pageName         String
    pageLink         String
    roles            AccessRightsOnRoles[]
    UserAccessRights UserAccessRights[]
}

model AccessRightsOnRoles {
    accessRight   AccessRights @relation(fields: [accessRightId], references: [id], onDelete: Cascade)
    accessRightId String
    role          Role         @relation(fields: [roleId], references: [id], onDelete: Cascade)
    roleId        String

    @@id([accessRightId, roleId])
}

model Role {
    id           String                @id @default(cuid())
    role         String
    accessRights AccessRightsOnRoles[]
    users        User[]
}

model UserAccessRights {
    id            String       @id @default(cuid())
    accessRight   AccessRights @relation(fields: [accessRightId], references: [id], onDelete: Cascade)
    accessRightId String
    grantedUser   User         @relation("UserAccessRights_GrantedUser", fields: [grantedUserId], references: [id], onDelete: Cascade)
    grantedUserId String
    grantedBy     User         @relation("UserAccessRights_GrantedBy", fields: [grantedById], references: [id], onDelete: Cascade)
    grantedById   String
    grantedAt     DateTime     @default(now())
}

model Semesters {
    id        String   @id @default(cuid())
    name      String
    startDate DateTime
    endDate   DateTime
}

model Holiday {
    id        String   @id @default(cuid())
    name      String
    startDate DateTime
    endDate   DateTime
}

model Course {
    id        String               @id @default(cuid())
    name      String
    code      String
    active    Boolean
    user      User[]
    equipment EquipmentOnCourses[]
}

model EquipmentOnCourses {
    equipment   Equipment @relation(fields: [equipmentId], references: [id], onDelete: Cascade)
    equipmentId String
    course      Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
    courseId    String

    @@id([equipmentId, courseId])
}

model OrganizationUnit {
    id   String @id @default(cuid())
    name String
    user User[]
}

model StaffType {
    id   String @id @default(cuid())
    name String
    user User[]
}

model GeneralSettings {
    id                        String @id @default(cuid())
    startTimeOfCollection     String
    endTimeOfCollection       String
    startRequestForCollection String
    endRequestForCollection   String
    voidLoanNumberOfDays      Int
    voidLoanTiming            String
    loanLimitPrice            Int
}
