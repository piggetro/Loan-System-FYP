// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Session {
    id        String   @id
    userId    String
    expiresAt DateTime
    user      User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model User {
    id                    String             @id
    email                 String             @unique
    name                  String
    mobile                String?
    hashed_password       String?
    batch                 Int?
    graduationDate        DateTime?
    organizationUnit      OrganizationUnit?  @relation(fields: [organizationUnitId], references: [id])
    organizationUnitId    String?
    staffType             StaffType?         @relation(fields: [staffTypeId], references: [id])
    staffTypeId           String?
    course                Course?            @relation(fields: [courseId], references: [id])
    courseId              String?
    role                  Role?              @relation(fields: [roleId], references: [id])
    roleId                String?
    announcement          Announcement[]
    loansLoanedBy         Loan[]             @relation("UserLoans_LoanedBy")
    loansApprovedBy       Loan[]             @relation("UserLoans_ApprovedBy")
    loansPreparedBy       Loan[]             @relation("UserLoans_PreparedBy")
    loansIssuedBy         Loan[]             @relation("UserLoans_IssuedBy")
    loansReturnedTo       Loan[]             @relation("UserLoans_ReturnedTo")
    alertIssuedBy         Alert[]            @relation("UserAlert_IssuedBy")
    alertReceivedBy       Alert[]            @relation("UserAlert_ReceivedBy")
    accessRightsGranted   UserAccessRights[] @relation("UserAccessRights_GrantedUser")
    accessRightsGrantedBy UserAccessRights[] @relation("UserAccessRights_GrantedBy")
    session               Session[]
    waiveRequest          WaiveRequest[]
    Loan                  Loan[]
}

model VerificationToken {
    id         String   @id @default(cuid())
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Category {
    id          String        @id @default(cuid())
    name        String
    subCategory SubCategory[]
}

model SubCategory {
    id         String      @id @default(cuid())
    name       String
    category   Category    @relation(fields: [categoryId], references: [id])
    categoryId String
    equipment  Equipment[]
}

model Equipment {
    id            String      @id @default(cuid())
    name          String
    photoPath     String
    updatedAt     DateTime    @updatedAt
    subCategory   SubCategory @relation(fields: [subCategoryId], references: [id])
    subCategoryId String
    inventory     Inventory[]
    loanItems     LoanItem[]
    checklist     String?
}

model Inventory {
    id             String          @id @default(cuid())
    assetNumber    String          @unique
    datePurchased  DateTime?
    warrantyExpiry DateTime?
    cost           Decimal
    status         EquipmentStatus
    equipment      Equipment?      @relation(fields: [equipmentId], references: [id])
    equipmentId    String?
    loaned         Loan?           @relation(fields: [loansId], references: [id])
    loansId        String?
    loanItems      LoanItem[]
}

enum EquipmentStatus {
    LOST
    BROKEN
    LOANED
    AVAILABLE
}

model Loan {
    id                        String         @id @default(cuid())
    loanId                    String         @unique
    remarks                   String
    dueDate                   DateTime
    status                    LoanStatus
    collectionDate            DateTime?
    loanedBy                  User           @relation("UserLoans_LoanedBy", fields: [loanedById], references: [id])
    approvingLecturer         User           @relation(fields: [approvingLecturerId], references: [id])
    approvedBy                User?          @relation("UserLoans_ApprovedBy", fields: [approvedById], references: [id])
    preparedBy                User?          @relation("UserLoans_PreparedBy", fields: [preparedById], references: [id])
    issuedBy                  User?          @relation("UserLoans_IssuedBy", fields: [issuedById], references: [id])
    returnedTo                User?          @relation("UserLoans_ReturnedTo", fields: [returnedToId], references: [id])
    loanedEquipment           Inventory[]
    loanedById                String
    approvedById              String?
    preparedById              String?
    issuedById                String?
    returnedToId              String?
    loanItems                 LoanItem[]
    waiveRequest              WaiveRequest[]
    approvingLecturerId       String
    dateCreated               DateTime       @default(now())
    collectionReferenceNumber String?
}

enum LoanStatus {
    PENDING_APPROVAL
    REJECTED
    REQUEST_COLLECTION
    PREPARING
    READY
    COLLECTED
    CANCELLED
    RETURNED
    OVERDUE
    PARTIAL_RETURN
}

model LoanItem {
    id          String             @id @default(cuid())
    loan        Loan               @relation(fields: [loanId], references: [id])
    loanId      String
    equipment   Equipment          @relation(fields: [equipmentId], references: [id])
    equipmentId String
    loanItem    Inventory?         @relation(fields: [inventoryId], references: [id])
    inventoryId String?
    status      LoanedItemsStatus?
}

enum LoanedItemsStatus {
    REQUEST_COLLECTION
    PREPARING
    READY
    COLLECTED
    RETURNED
    BROKEN
    LOST
    CANCELLED
}

model WaiveRequest {
    id               String             @id @default(cuid())
    loan             Loan               @relation(fields: [loanId], references: [id])
    loanId           String
    status           WaiveRequestStatus
    approvedBy       User               @relation(fields: [approvedByUserId], references: [id])
    approvedByUserId String
}

enum WaiveRequestStatus {
    PENDING
    APPROVED
    REJECTED
}

model AccessRights {
    id               String                @id @default(cuid())
    pageName         String
    pageLink         String
    roles            AccessRightsOnRoles[]
    UserAccessRights UserAccessRights[]
}

model AccessRightsOnRoles {
    accessRight   AccessRights @relation(fields: [accessRightId], references: [id])
    accessRightId String
    role          Role         @relation(fields: [roleId], references: [id])
    roleId        String

    @@id([accessRightId, roleId])
}

model Role {
    id           String                @id @default(cuid())
    role         String
    accessRights AccessRightsOnRoles[]
    users        User[]
}

model UserAccessRights {
    id            String       @id @default(cuid())
    accessRight   AccessRights @relation(fields: [accessRightId], references: [id])
    accessRightId String
    grantedUser   User         @relation("UserAccessRights_GrantedUser", fields: [grantedUserId], references: [id])
    grantedUserId String
    grantedBy     User         @relation("UserAccessRights_GrantedBy", fields: [grantedById], references: [id])
    grantedById   String
    grantedAt     DateTime     @default(now())
}

model Semesters {
    id           String   @id @default(cuid())
    name         String
    startDate    DateTime
    endDate      DateTime
    numberOfDays Int
}

model Holiday {
    id           String   @id @default(cuid())
    name         String
    startDate    DateTime
    endDate      DateTime
    numberOfDays Int
}

model Course {
    id     String  @id @default(cuid())
    name   String
    code   String
    active Boolean
    user   User[]
}

model OrganizationUnit {
    id   String @id @default(cuid())
    name String
    user User[]
}

model StaffType {
    id   String @id @default(cuid())
    name String
    user User[]
}

model SchoolDetails {
    schoolName  String  @id @default(cuid())
    address     String?
    url         String?
    phoneNumber String?
    faxNumber   String?
    email       String
}

model Announcement {
    id           String   @id @default(cuid())
    announcement String
    createdBy    User     @relation(fields: [userId], references: [id])
    createdAt    DateTime @default(now())
    updatedAt    DateTime @updatedAt
    userId       String
}

model Alert {
    id           String @id @default(cuid())
    alert        String
    issuedBy     User   @relation("UserAlert_IssuedBy", fields: [issuedById], references: [id])
    receivedBy   User   @relation("UserAlert_ReceivedBy", fields: [receivedById], references: [id])
    issuedById   String
    receivedById String
}
